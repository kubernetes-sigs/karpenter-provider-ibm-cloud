@startuml
namespace autoplacement {
    class Controller << (S,Aquamarine) >> {
        - client client.Client
        - instanceTypes instancetype.Provider
        - subnets subnet.Provider
        - log logr.Logger

        - updateCondition(nodeClass *v1alpha1.IBMNodeClass, conditionType string, status v1.ConditionStatus, reason string, message string) 

        + Start(ctx context.Context) error
        + Reconcile(ctx context.Context, req reconcile.Request) (reconcile.Result, error)

    }
}


namespace cache {
    class UnavailableOfferings << (S,Aquamarine) >> {
        - mu sync.RWMutex
        - offerings <font color=blue>map</font>[string]time.Time

        + Add(offeringID string, expiry time.Time) 
        + Remove(offeringID string) 
        + IsUnavailable(offeringID string) bool
        + Cleanup() 

    }
}


namespace cloudprovider {
    class CloudProvider << (S,Aquamarine) >> {
        - kubeClient client.Client
        - recorder events.Recorder
        - instanceTypeProvider instancetype.Provider
        - instanceProvider instance.Provider

        + Get(ctx context.Context, providerID string) (*v1.NodeClaim, error)
        + List(ctx context.Context) ([]*v1.NodeClaim, error)
        + Create(ctx context.Context, nodeClaim *v1.NodeClaim) (*v1.NodeClaim, error)
        + Delete(ctx context.Context, nodeClaim *v1.NodeClaim) error
        + GetInstanceTypes(ctx context.Context, nodePool *v1.NodePool) ([]*cloudprovider.InstanceType, error)
        + IsDrifted(ctx context.Context, nodeClaim *v1.NodeClaim) (cloudprovider.DriftReason, error)
        + Name() string
        + GetSupportedNodeClasses() []status.Object

    }
}


namespace controllers {
    class RecorderAdapter << (S,Aquamarine) >> {
        + Event(object runtime.Object, eventtype string, reason string, message string) 
        + Eventf(object runtime.Object, eventtype string, reason string, messageFmt string, args ...<font color=blue>interface</font>{}) 
        + AnnotatedEventf(object runtime.Object, annotations <font color=blue>map</font>[string]string, eventtype string, reason string, messageFmt string, args ...<font color=blue>interface</font>{}) 

    }
}
"events.Recorder" *-- "controllers.RecorderAdapter"


namespace garbagecollection {
    class Controller << (S,Aquamarine) >> {
        - kubeClient client.Client
        - cloudProvider cloudprovider.CloudProvider

        - removeFinalizer(ctx context.Context, nodeClaim *v1beta1.NodeClaim) error

        + Reconcile(ctx context.Context) (reconcile.Result, error)
        + Name() string
        + Register(_ context.Context, m manager.Manager) error

    }
}


namespace hash {
    class Controller << (S,Aquamarine) >> {
        - kubeClient client.Client

        + Reconcile(ctx context.Context, req reconcile.Request) (reconcile.Result, error)
        + Register(_ context.Context, m manager.Manager) error

    }
}


namespace ibm {
    interface Authenticator  {
        + RequestToken() (*TokenResponse, error)

    }
    class Client << (S,Aquamarine) >> {
        - vpcURL string
        - vpcAuthType string
        - vpcAPIKey string
        - ibmAPIKey string
        - region string
        - iamClient *IAMClient

        + GetVPCClient() (*VPCClient, error)
        + GetGlobalCatalogClient() (*GlobalCatalogClient, error)
        + GetRegion() string

    }
    class GlobalCatalogClient << (S,Aquamarine) >> {
        - iamClient iamClientInterface
        - client globalCatalogClientInterface

        - ensureClient(ctx context.Context) error

        + GetInstanceType(ctx context.Context, id string) (*globalcatalogv1.CatalogEntry, error)
        + ListInstanceTypes(ctx context.Context) ([]globalcatalogv1.CatalogEntry, error)

    }
    class IAMClient << (S,Aquamarine) >> {
        - apiKey string
        - token string
        - expiry time.Time

        + Authenticator Authenticator

        + GetToken(ctx context.Context) (string, error)

    }
    class TokenResponse << (S,Aquamarine) >> {
        + AccessToken string
        + ExpiresIn int64

    }
    class VPCClient << (S,Aquamarine) >> {
        - baseURL string
        - authType string
        - apiKey string
        - region string
        - client vpcClientInterface

        + CreateInstance(ctx context.Context, instancePrototype *vpcv1.InstancePrototype) (*vpcv1.Instance, error)
        + DeleteInstance(ctx context.Context, id string) error
        + GetInstance(ctx context.Context, id string) (*vpcv1.Instance, error)
        + ListInstances(ctx context.Context) ([]vpcv1.Instance, error)
        + UpdateInstanceTags(ctx context.Context, id string, tags <font color=blue>map</font>[string]string) error

    }
    interface globalCatalogClientInterface  {
        + GetCatalogEntryWithContext( context.Context,  *globalcatalogv1.GetCatalogEntryOptions) (*globalcatalogv1.CatalogEntry, *core.DetailedResponse, error)
        + ListCatalogEntriesWithContext( context.Context,  *globalcatalogv1.ListCatalogEntriesOptions) (*globalcatalogv1.EntrySearchResult, *core.DetailedResponse, error)

    }
    class iamAuthenticator << (S,Aquamarine) >> {
        - auth *core.IamAuthenticator

        + RequestToken() (*TokenResponse, error)

    }
    interface iamClientInterface  {
        + GetToken( context.Context) (string, error)

    }
    interface vpcClientInterface  {
        + CreateInstanceWithContext( context.Context,  *vpcv1.CreateInstanceOptions) (*vpcv1.Instance, *core.DetailedResponse, error)
        + DeleteInstanceWithContext( context.Context,  *vpcv1.DeleteInstanceOptions) (*core.DetailedResponse, error)
        + GetInstanceWithContext( context.Context,  *vpcv1.GetInstanceOptions) (*vpcv1.Instance, *core.DetailedResponse, error)
        + ListInstancesWithContext( context.Context,  *vpcv1.ListInstancesOptions) (*vpcv1.InstanceCollection, *core.DetailedResponse, error)
        + UpdateInstanceWithContext( context.Context,  *vpcv1.UpdateInstanceOptions) (*vpcv1.Instance, *core.DetailedResponse, error)

    }
}

"ibm.iamClientInterface" <|-- "ibm.IAMClient"
"ibm.Authenticator" <|-- "ibm.iamAuthenticator"

namespace instance {
    class IBMCloudInstanceProvider << (S,Aquamarine) >> {
        - client *ibm.Client

        + Create(ctx context.Context, nodeClaim *v1.NodeClaim) (*v1.Node, error)
        + Delete(ctx context.Context, node *v1.Node) error
        + GetInstance(ctx context.Context, node *v1.Node) (*Instance, error)
        + TagInstance(ctx context.Context, instanceID string, tags <font color=blue>map</font>[string]string) error

    }
    class Instance << (S,Aquamarine) >> {
        + ID string
        + Name string
        + Type string
        + Region string
        + Zone string
        + Status InstanceStatus
        + State string
        + ImageID string
        + CreationTime time.Time
        + LaunchTime string
        + CapacityType string
        + Tags <font color=blue>map</font>[string]string

    }
    class InstanceOptions << (S,Aquamarine) >> {
        + Type string
        + Zone string
        + Labels <font color=blue>map</font>[string]string
        + Taints []string

    }
    interface Provider  {
        + Create(ctx context.Context, nodeClaim *v1.NodeClaim) (*v1.Node, error)
        + Delete(ctx context.Context, node *v1.Node) error
        + GetInstance(ctx context.Context, node *v1.Node) (*Instance, error)
        + TagInstance(ctx context.Context, instanceID string, tags <font color=blue>map</font>[string]string) error

    }
    class instance.InstanceStatus << (T, #FF7700) >>  {
    }
}

"instance.Provider" <|-- "instance.IBMCloudInstanceProvider"

namespace instancetype {
    class Controller << (S,Aquamarine) >> {
        - instanceTypeProvider instancetype.Provider

        + Reconcile(ctx context.Context) (reconcile.Result, error)
        + Register(_ context.Context, m manager.Manager) error

    }
    class ExtendedInstanceType << (S,Aquamarine) >> {
        + Architecture string
        + Price float64

    }
    class IBMInstanceTypeProvider << (S,Aquamarine) >> {
        - client *ibm.Client

        - rankInstanceTypes(instanceTypes []*ExtendedInstanceType) []*ExtendedInstanceType

        + Get(ctx context.Context, name string) (*cloudprovider.InstanceType, error)
        + List(ctx context.Context) ([]*cloudprovider.InstanceType, error)
        + Create(ctx context.Context, instanceType *cloudprovider.InstanceType) error
        + Delete(ctx context.Context, instanceType *cloudprovider.InstanceType) error
        + FilterInstanceTypes(ctx context.Context, requirements *v1alpha1.InstanceTypeRequirements) ([]*cloudprovider.InstanceType, error)
        + RankInstanceTypes(instanceTypes []*cloudprovider.InstanceType) []*cloudprovider.InstanceType

    }
    class InstanceTypeCapabilities << (S,Aquamarine) >> {
        + CPU int
        + Memory int
        + Architecture string
        + GPU bool
        + NetworkBandwidth int
        + StorageType string

    }
    class InstanceTypeRequirements << (S,Aquamarine) >> {
        + CPU int
        + Memory int
        + Architecture string
        + GPU bool

    }
    interface Provider  {
        + Get(ctx context.Context, name string) (*cloudprovider.InstanceType, error)
        + List(ctx context.Context) ([]*cloudprovider.InstanceType, error)
        + Create(ctx context.Context, instanceType *cloudprovider.InstanceType) error
        + Delete(ctx context.Context, instanceType *cloudprovider.InstanceType) error
        + FilterInstanceTypes(ctx context.Context, requirements *v1alpha1.InstanceTypeRequirements) ([]*cloudprovider.InstanceType, error)
        + RankInstanceTypes(instanceTypes []*cloudprovider.InstanceType) []*cloudprovider.InstanceType

    }
    class instanceTypeRanking << (S,Aquamarine) >> {
        - instanceType *ExtendedInstanceType
        - score float64

    }
}
"cloudprovider.InstanceType" *-- "instancetype.ExtendedInstanceType"

"instancetype.Provider" <|-- "instancetype.IBMInstanceTypeProvider"

namespace interruption {
    class Controller << (S,Aquamarine) >> {
        - kubeClient client.Client
        - recorder record.EventRecorder
        - unavailableOfferings *cache.UnavailableOfferings

        + Reconcile(ctx context.Context) (reconcile.Result, error)
        + Name() string
        + Register(_ context.Context, m manager.Manager) error

    }
}


namespace main {
    class IBMCloudReconciler << (S,Aquamarine) >> {
        + CloudProvider *cloudprovider.CloudProvider

        + Reconcile(ctx context.Context, req reconcile.Request) (reconcile.Result, error)

    }
    class IBMInstanceType << (S,Aquamarine) >> {
        + Name string
        + Architecture string
        + OperatingSystems []v1.OSName
        + Resources v1.ResourceList
        + Offerings []IBMOffering

    }
    class IBMOffering << (S,Aquamarine) >> {
        + Requirements []v1.NodeSelectorRequirement
        + Offering cloudprovider.Offering

    }
    interface globalCatalogService  {
        + ListCatalogEntries(options *globalcatalogv1.ListCatalogEntriesOptions) (*globalcatalogv1.EntrySearchResult, *core.DetailedResponse, error)
        + GetPricing(options *globalcatalogv1.GetPricingOptions) (*globalcatalogv1.PricingGet, *core.DetailedResponse, error)

    }
}
"client.Client" *-- "main.IBMCloudReconciler"


namespace operator {
    class Operator << (S,Aquamarine) >> {
        - kubeClient client.Client
        - kubeClientSet *kubernetes.Clientset
        - unavailableOfferings *cache.UnavailableOfferings
        - recorder record.EventRecorder

        + GetClient() client.Client
        + GetEventRecorder() record.EventRecorder
        + GetUnavailableOfferings() *cache.UnavailableOfferings
        + WithControllers() []controller.Controller
        + WithWebhooks() []manager.Runnable
        + WithCustomResourceDefinitions() []client.Object
        + Cleanup(ctx context.Context) error
        + Name() string
        + Ready() bool
        + LivenessProbe() error

    }
}


namespace options {
    class Key << (S,Aquamarine) >> {
    }
    class Options << (S,Aquamarine) >> {
        + Interruption bool
        + APIKey string
        + Region string
        + Zone string
        + ResourceGroupID string

        + Validate() error

    }
}


namespace pricing {
    class Controller << (S,Aquamarine) >> {
        - pricingProvider pricing.Provider

        + Reconcile(ctx context.Context) (reconcile.Result, error)
        + Register(_ context.Context, m manager.Manager) error

    }
    class Price << (S,Aquamarine) >> {
        + InstanceType string
        + Zone string
        + HourlyPrice float64
        + Currency string

    }
    interface Provider  {
        + GetPrice(ctx context.Context, instanceType string, zone string) (float64, error)
        + GetPrices(ctx context.Context, zone string) (<font color=blue>map</font>[string]float64, error)
        + Refresh(ctx context.Context) error

    }
}


namespace status {
    class Controller << (S,Aquamarine) >> {
        - kubeClient client.Client

        - validateNodeClass(ctx context.Context, nc *v1alpha1.IBMNodeClass) error

        + Reconcile(ctx context.Context, req reconcile.Request) (reconcile.Result, error)
        + Register(_ context.Context, m manager.Manager) error

    }
}


namespace subnet {
    interface Provider  {
        + ListSubnets(ctx context.Context, vpcID string) ([]SubnetInfo, error)
        + GetSubnet(ctx context.Context, subnetID string) (*SubnetInfo, error)
        + SelectSubnets(ctx context.Context, vpcID string, strategy *v1alpha1.PlacementStrategy) ([]SubnetInfo, error)

    }
    class SubnetInfo << (S,Aquamarine) >> {
        + ID string
        + Zone string
        + CIDR string
        + AvailableIPs int32
        + Tags <font color=blue>map</font>[string]string
        + State string
        + TotalIPCount int32
        + UsedIPCount int32
        + ReservedIPCount int32

    }
    class provider << (S,Aquamarine) >> {
        + SelectSubnets(ctx context.Context, vpcID string, strategy *v1alpha1.PlacementStrategy) ([]SubnetInfo, error)
        + ListSubnets(ctx context.Context, vpcID string) ([]SubnetInfo, error)
        + GetSubnet(ctx context.Context, subnetID string) (*SubnetInfo, error)

    }
    class subnetScore << (S,Aquamarine) >> {
        - subnet SubnetInfo
        - score float64

    }
}

"subnet.Provider" <|-- "subnet.provider"

namespace tagging {
    class Controller << (S,Aquamarine) >> {
        - kubeClient client.Client
        - instanceProvider *instance.IBMCloudInstanceProvider

        + Reconcile(ctx context.Context) (reconcile.Result, error)
        + Name() string
        + Register(_ context.Context, m manager.Manager) error

    }
}


namespace termination {
    class Controller << (S,Aquamarine) >> {
        - kubeClient client.Client
        - recorder record.EventRecorder

        + Reconcile(ctx context.Context, req reconcile.Request) (reconcile.Result, error)
        + Register(_ context.Context, m manager.Manager) error

    }
}


namespace v1alpha1 {
    class IBMNodeClass << (S,Aquamarine) >> {
        + Spec IBMNodeClassSpec
        + Status IBMNodeClassStatus
        + Spec IBMNodeClassSpec
        + Status v1alpha1.IBMNodeClassStatus

        + StatusConditions() status.ConditionSet
        + GetConditions() []status.Condition
        + SetConditions(conditions []status.Condition) 
        + DeepCopyInto(out *IBMNodeClass) 
        + DeepCopy() *IBMNodeClass
        + DeepCopyObject() runtime.Object
        + DeepCopyInto(out *IBMNodeClass) 
        + DeepCopy() *IBMNodeClass
        + DeepCopyObject() runtime.Object

    }
    class IBMNodeClassList << (S,Aquamarine) >> {
        + Items []IBMNodeClass
        + Items []IBMNodeClass

        + DeepCopyInto(out *IBMNodeClassList) 
        + DeepCopy() *IBMNodeClassList
        + DeepCopyObject() runtime.Object
        + DeepCopyInto(out *IBMNodeClassList) 
        + DeepCopy() *IBMNodeClassList
        + DeepCopyObject() runtime.Object

    }
    class IBMNodeClassSpec << (S,Aquamarine) >> {
        + Region string
        + Zone string
        + InstanceProfile string
        + InstanceRequirements *InstanceTypeRequirements
        + Image string
        + VPC string
        + Subnet string
        + PlacementStrategy *PlacementStrategy
        + SecurityGroups []string
        + Tags <font color=blue>map</font>[string]string
        + Region string
        + Zones []string
        + VPC string
        + Subnet string
        + InstanceProfile string
        + Image string
        + ResourceGroup string
        + SecurityGroups []string
        + Tags <font color=blue>map</font>[string]string

        + DeepCopyInto(out *IBMNodeClassSpec) 
        + DeepCopy() *IBMNodeClassSpec
        + DeepCopyInto(out *IBMNodeClassSpec) 
        + DeepCopy() *IBMNodeClassSpec

    }
    class IBMNodeClassStatus << (S,Aquamarine) >> {
        + SpecHash uint64
        + LastValidationTime v1.Time
        + ValidationError string
        + SelectedInstanceTypes []string
        + SelectedSubnets []string
        + Conditions []v1.Condition

        + DeepCopyInto(out *IBMNodeClassStatus) 
        + DeepCopy() *IBMNodeClassStatus

    }
    class InstanceTypeRequirements << (S,Aquamarine) >> {
        + Architecture string
        + MinimumCPU int32
        + MinimumMemory int32
        + MaximumHourlyPrice string

        + DeepCopyInto(out *InstanceTypeRequirements) 
        + DeepCopy() *InstanceTypeRequirements

    }
    class PlacementStrategy << (S,Aquamarine) >> {
        + ZoneBalance string
        + SubnetSelection *SubnetSelectionCriteria

        + DeepCopyInto(out *PlacementStrategy) 
        + DeepCopy() *PlacementStrategy

    }
    class SubnetSelectionCriteria << (S,Aquamarine) >> {
        + MinimumAvailableIPs int32
        + RequiredTags <font color=blue>map</font>[string]string

        + DeepCopyInto(out *SubnetSelectionCriteria) 
        + DeepCopy() *SubnetSelectionCriteria

    }
}
"v1.ObjectMeta" *-- "v1alpha1.IBMNodeClass"
"v1.TypeMeta" *-- "v1alpha1.IBMNodeClass"
"v1.ListMeta" *-- "v1alpha1.IBMNodeClassList"
"v1.TypeMeta" *-- "v1alpha1.IBMNodeClassList"


"__builtin__.string" #.. "instance.InstanceStatus"
@enduml
