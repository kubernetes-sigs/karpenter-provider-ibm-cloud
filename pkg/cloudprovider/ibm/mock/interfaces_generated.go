// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ibm "github.com/kubernetes-sigs/karpenter-provider-ibm-cloud/pkg/cloudprovider/ibm"
)

// MockIKSClientInterface is a mock of IKSClientInterface interface.
type MockIKSClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockIKSClientInterfaceMockRecorder
}

// MockIKSClientInterfaceMockRecorder is the mock recorder for MockIKSClientInterface.
type MockIKSClientInterfaceMockRecorder struct {
	mock *MockIKSClientInterface
}

// NewMockIKSClientInterface creates a new mock instance.
func NewMockIKSClientInterface(ctrl *gomock.Controller) *MockIKSClientInterface {
	mock := &MockIKSClientInterface{ctrl: ctrl}
	mock.recorder = &MockIKSClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIKSClientInterface) EXPECT() *MockIKSClientInterfaceMockRecorder {
	return m.recorder
}

// GetClusterConfig mocks base method.
func (m *MockIKSClientInterface) GetClusterConfig(ctx context.Context, clusterID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterConfig", ctx, clusterID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterConfig indicates an expected call of GetClusterConfig.
func (mr *MockIKSClientInterfaceMockRecorder) GetClusterConfig(ctx, clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterConfig", reflect.TypeOf((*MockIKSClientInterface)(nil).GetClusterConfig), ctx, clusterID)
}

// GetVPCInstanceIDFromWorker mocks base method.
func (m *MockIKSClientInterface) GetVPCInstanceIDFromWorker(ctx context.Context, clusterID, workerID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCInstanceIDFromWorker", ctx, clusterID, workerID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCInstanceIDFromWorker indicates an expected call of GetVPCInstanceIDFromWorker.
func (mr *MockIKSClientInterfaceMockRecorder) GetVPCInstanceIDFromWorker(ctx, clusterID, workerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCInstanceIDFromWorker", reflect.TypeOf((*MockIKSClientInterface)(nil).GetVPCInstanceIDFromWorker), ctx, clusterID, workerID)
}

// GetWorkerDetails mocks base method.
func (m *MockIKSClientInterface) GetWorkerDetails(ctx context.Context, clusterID, workerID string) (*ibm.IKSWorkerDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkerDetails", ctx, clusterID, workerID)
	ret0, _ := ret[0].(*ibm.IKSWorkerDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkerDetails indicates an expected call of GetWorkerDetails.
func (mr *MockIKSClientInterfaceMockRecorder) GetWorkerDetails(ctx, clusterID, workerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerDetails", reflect.TypeOf((*MockIKSClientInterface)(nil).GetWorkerDetails), ctx, clusterID, workerID)
}

// GetWorkerPool mocks base method.
func (m *MockIKSClientInterface) GetWorkerPool(ctx context.Context, clusterID, poolID string) (*ibm.WorkerPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkerPool", ctx, clusterID, poolID)
	ret0, _ := ret[0].(*ibm.WorkerPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkerPool indicates an expected call of GetWorkerPool.
func (mr *MockIKSClientInterfaceMockRecorder) GetWorkerPool(ctx, clusterID, poolID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerPool", reflect.TypeOf((*MockIKSClientInterface)(nil).GetWorkerPool), ctx, clusterID, poolID)
}

// ListWorkerPools mocks base method.
func (m *MockIKSClientInterface) ListWorkerPools(ctx context.Context, clusterID string) ([]*ibm.WorkerPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkerPools", ctx, clusterID)
	ret0, _ := ret[0].([]*ibm.WorkerPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkerPools indicates an expected call of ListWorkerPools.
func (mr *MockIKSClientInterfaceMockRecorder) ListWorkerPools(ctx, clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkerPools", reflect.TypeOf((*MockIKSClientInterface)(nil).ListWorkerPools), ctx, clusterID)
}

// ResizeWorkerPool mocks base method.
func (m *MockIKSClientInterface) ResizeWorkerPool(ctx context.Context, clusterID, poolID string, newSize int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeWorkerPool", ctx, clusterID, poolID, newSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResizeWorkerPool indicates an expected call of ResizeWorkerPool.
func (mr *MockIKSClientInterfaceMockRecorder) ResizeWorkerPool(ctx, clusterID, poolID, newSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeWorkerPool", reflect.TypeOf((*MockIKSClientInterface)(nil).ResizeWorkerPool), ctx, clusterID, poolID, newSize)
}
