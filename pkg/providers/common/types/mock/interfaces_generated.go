// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/kubernetes-sigs/karpenter-provider-ibm-cloud/pkg/providers/common/types"
	v1 "k8s.io/api/core/v1"
	v10 "sigs.k8s.io/karpenter/pkg/apis/v1"
	cloudprovider "sigs.k8s.io/karpenter/pkg/cloudprovider"
)

// MockInstanceProvider is a mock of InstanceProvider interface.
type MockInstanceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceProviderMockRecorder
}

// MockInstanceProviderMockRecorder is the mock recorder for MockInstanceProvider.
type MockInstanceProviderMockRecorder struct {
	mock *MockInstanceProvider
}

// NewMockInstanceProvider creates a new mock instance.
func NewMockInstanceProvider(ctrl *gomock.Controller) *MockInstanceProvider {
	mock := &MockInstanceProvider{ctrl: ctrl}
	mock.recorder = &MockInstanceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceProvider) EXPECT() *MockInstanceProviderMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInstanceProvider) Create(ctx context.Context, nodeClaim *v10.NodeClaim, instanceTypes []*cloudprovider.InstanceType) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, nodeClaim, instanceTypes)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockInstanceProviderMockRecorder) Create(ctx, nodeClaim, instanceTypes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInstanceProvider)(nil).Create), ctx, nodeClaim, instanceTypes)
}

// Delete mocks base method.
func (m *MockInstanceProvider) Delete(ctx context.Context, node *v1.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, node)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockInstanceProviderMockRecorder) Delete(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInstanceProvider)(nil).Delete), ctx, node)
}

// Get mocks base method.
func (m *MockInstanceProvider) Get(ctx context.Context, providerID string) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, providerID)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInstanceProviderMockRecorder) Get(ctx, providerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInstanceProvider)(nil).Get), ctx, providerID)
}

// List mocks base method.
func (m *MockInstanceProvider) List(ctx context.Context) ([]*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockInstanceProviderMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockInstanceProvider)(nil).List), ctx)
}

// MockVPCInstanceProvider is a mock of VPCInstanceProvider interface.
type MockVPCInstanceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockVPCInstanceProviderMockRecorder
}

// MockVPCInstanceProviderMockRecorder is the mock recorder for MockVPCInstanceProvider.
type MockVPCInstanceProviderMockRecorder struct {
	mock *MockVPCInstanceProvider
}

// NewMockVPCInstanceProvider creates a new mock instance.
func NewMockVPCInstanceProvider(ctrl *gomock.Controller) *MockVPCInstanceProvider {
	mock := &MockVPCInstanceProvider{ctrl: ctrl}
	mock.recorder = &MockVPCInstanceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVPCInstanceProvider) EXPECT() *MockVPCInstanceProviderMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVPCInstanceProvider) Create(ctx context.Context, nodeClaim *v10.NodeClaim, instanceTypes []*cloudprovider.InstanceType) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, nodeClaim, instanceTypes)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockVPCInstanceProviderMockRecorder) Create(ctx, nodeClaim, instanceTypes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVPCInstanceProvider)(nil).Create), ctx, nodeClaim, instanceTypes)
}

// Delete mocks base method.
func (m *MockVPCInstanceProvider) Delete(ctx context.Context, node *v1.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, node)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVPCInstanceProviderMockRecorder) Delete(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVPCInstanceProvider)(nil).Delete), ctx, node)
}

// Get mocks base method.
func (m *MockVPCInstanceProvider) Get(ctx context.Context, providerID string) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, providerID)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVPCInstanceProviderMockRecorder) Get(ctx, providerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVPCInstanceProvider)(nil).Get), ctx, providerID)
}

// List mocks base method.
func (m *MockVPCInstanceProvider) List(ctx context.Context) ([]*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVPCInstanceProviderMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVPCInstanceProvider)(nil).List), ctx)
}

// UpdateTags mocks base method.
func (m *MockVPCInstanceProvider) UpdateTags(ctx context.Context, providerID string, tags map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, providerID, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTags indicates an expected call of UpdateTags.
func (mr *MockVPCInstanceProviderMockRecorder) UpdateTags(ctx, providerID, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockVPCInstanceProvider)(nil).UpdateTags), ctx, providerID, tags)
}

// MockIKSWorkerPoolProvider is a mock of IKSWorkerPoolProvider interface.
type MockIKSWorkerPoolProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIKSWorkerPoolProviderMockRecorder
}

// MockIKSWorkerPoolProviderMockRecorder is the mock recorder for MockIKSWorkerPoolProvider.
type MockIKSWorkerPoolProviderMockRecorder struct {
	mock *MockIKSWorkerPoolProvider
}

// NewMockIKSWorkerPoolProvider creates a new mock instance.
func NewMockIKSWorkerPoolProvider(ctrl *gomock.Controller) *MockIKSWorkerPoolProvider {
	mock := &MockIKSWorkerPoolProvider{ctrl: ctrl}
	mock.recorder = &MockIKSWorkerPoolProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIKSWorkerPoolProvider) EXPECT() *MockIKSWorkerPoolProviderMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIKSWorkerPoolProvider) Create(ctx context.Context, nodeClaim *v10.NodeClaim, instanceTypes []*cloudprovider.InstanceType) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, nodeClaim, instanceTypes)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIKSWorkerPoolProviderMockRecorder) Create(ctx, nodeClaim, instanceTypes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIKSWorkerPoolProvider)(nil).Create), ctx, nodeClaim, instanceTypes)
}

// Delete mocks base method.
func (m *MockIKSWorkerPoolProvider) Delete(ctx context.Context, node *v1.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, node)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIKSWorkerPoolProviderMockRecorder) Delete(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIKSWorkerPoolProvider)(nil).Delete), ctx, node)
}

// Get mocks base method.
func (m *MockIKSWorkerPoolProvider) Get(ctx context.Context, providerID string) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, providerID)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIKSWorkerPoolProviderMockRecorder) Get(ctx, providerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIKSWorkerPoolProvider)(nil).Get), ctx, providerID)
}

// GetPool mocks base method.
func (m *MockIKSWorkerPoolProvider) GetPool(ctx context.Context, clusterID, poolID string) (*types.WorkerPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPool", ctx, clusterID, poolID)
	ret0, _ := ret[0].(*types.WorkerPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPool indicates an expected call of GetPool.
func (mr *MockIKSWorkerPoolProviderMockRecorder) GetPool(ctx, clusterID, poolID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPool", reflect.TypeOf((*MockIKSWorkerPoolProvider)(nil).GetPool), ctx, clusterID, poolID)
}

// List mocks base method.
func (m *MockIKSWorkerPoolProvider) List(ctx context.Context) ([]*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIKSWorkerPoolProviderMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIKSWorkerPoolProvider)(nil).List), ctx)
}

// ListPools mocks base method.
func (m *MockIKSWorkerPoolProvider) ListPools(ctx context.Context, clusterID string) ([]*types.WorkerPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPools", ctx, clusterID)
	ret0, _ := ret[0].([]*types.WorkerPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPools indicates an expected call of ListPools.
func (mr *MockIKSWorkerPoolProviderMockRecorder) ListPools(ctx, clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPools", reflect.TypeOf((*MockIKSWorkerPoolProvider)(nil).ListPools), ctx, clusterID)
}

// ResizePool mocks base method.
func (m *MockIKSWorkerPoolProvider) ResizePool(ctx context.Context, clusterID, poolID string, newSize int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizePool", ctx, clusterID, poolID, newSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResizePool indicates an expected call of ResizePool.
func (mr *MockIKSWorkerPoolProviderMockRecorder) ResizePool(ctx, clusterID, poolID, newSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizePool", reflect.TypeOf((*MockIKSWorkerPoolProvider)(nil).ResizePool), ctx, clusterID, poolID, newSize)
}
